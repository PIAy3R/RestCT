{
  "openapi": "3.0.1",
  "info": {
    "description": "This is a simple API for test",
    "version": "1.0.0",
    "title": "BingMap Route API"
  },
  "servers": [
    {
      "url": "http://dev.virtualearth.net/REST/v1"
    }
  ],
  "paths": {
    "/Routes": {
      "get": {
        "description": "Find a driving route.",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          },
          {
            "name": "waypoint.1",
            "in": "query",
            "description": "Specifies two or more locations that define the route and that are in sequential order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "waypoint.3",
            "in": "query",
            "description": "Specifies two or more locations that define the route and that are in sequential order.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viaWaypoint.2",
            "in": "query",
            "description": "Specifies one or more locations that define intermediate points of a route between waypoints.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "avoid",
            "in": "query",
            "description": "Specifies the road types to minimize or avoid when a route is created for the driving travel mode. if travelMode is not Driving, avoid is not required",
            "schema": {
              "type": "string",
              "enum": [
                "highways",
                "tolls",
                "ferry",
                "minimizeHighways",
                "minimizeTolls",
                "borderCrossing"
              ]
            }
          },
          {
            "name": "distanceBeforeFirstTurn",
            "in": "query",
            "description": " Specifies the distance before the first turn is allowed in the route. if travelMode is Driving, distanceBeforeFirstTurn is required",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "heading",
            "in": "query",
            "description": " Desired camera heading in degrees, clockwise from north.",
            "schema": {
              "maximum": 359,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "optimize",
            "in": "query",
            "description": "Specifies what parameters to use to optimize the route on the map.",
            "schema": {
              "type": "string",
              "enum": [
                "distance",
                "time",
                "timeWithTraffic",
                "timeAvoidClosure"
              ]
            }
          },
          {
            "name": "optimizeWaypoints",
            "in": "query",
            "description": "Instructs the API to rearrange the route waypoints and reduce the route cost specified with the optimize parameter. ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "routeAttributes",
            "in": "query",
            "description": "Specify to include or exclude parts of the routes response.",
            "schema": {
              "type": "string",
              "enum": [
                "excludeItinerary",
                "routePath",
                "transitStops",
                "routeSummariesOnly",
                "regionTravelSummary",
                "all"
              ]
            }
          },
          {
            "name": "routePathOutput",
            "in": "query",
            "description": "Specifies whether the response should include information about Point (latitude and longitude) values for the routeâ€™s path.",
            "schema": {
              "type": "string",
              "enum": [
                "Points",
                "None"
              ]
            }
          },
          {
            "name": "tolerances",
            "in": "query",
            "description": " Specifies a series of tolerance values. Each value produces a subset of points that approximates the route that is described by the full set of points. if routePathOutput is Points, tolerances is required.",
            "schema": {}
          },
          {
            "name": "distanceUnit",
            "in": "query",
            "description": " The units to use for distance in the response.",
            "schema": {
              "type": "string",
              "default": "km",
              "enum": [
                "Kilometer",
                "km",
                "Mile",
                "mi"
              ]
            }
          },
          {
            "name": "dateTime",
            "in": "query",
            "description": "The timeType parameter identifies the desired transit time, such as arrival time or departure time. if travelMode is Transit, dateTime is required",
            "schema": {
              "type": "string",
              "format": "datetime"
            }
          },
          {
            "name": "timeType",
            "in": "query",
            "description": "Specifies how to interpret the date and transit time value that is specified by the dateTime parameter. if travelMode is Transit, timeType is required",
            "schema": {
              "type": "string",
              "enum": [
                "Arrival",
                "Departure",
                "LastAvailable"
              ]
            }
          },
          {
            "name": "maxSolutions",
            "in": "query",
            "description": "Specifies the maximum number of transit routes to return. if travelMode is Transit or Driving, maxSolutions is required",
            "schema": {
              "maximum": 3,
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "itineraryGroups",
            "in": "query",
            "description": " Specifies whether the response include information about itinerary groups (continuous itinerary items in same mode are usually grouped together).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      }
    },
    "/Routes/{travelMode}": {
      "get": {
        "description": "Find a walking, driving or transit route by specifying the mode of travel.",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          },
          {
            "name": "waypoint.1",
            "in": "query",
            "description": "Specifies two or more locations that define the route and that are in sequential order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "waypoint.3",
            "in": "query",
            "description": "Specifies two or more locations that define the route and that are in sequential order.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viaWaypoint.2",
            "in": "query",
            "description": "Specifies one or more locations that define intermediate points of a route between waypoints.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "avoid",
            "in": "query",
            "description": "Specifies the road types to minimize or avoid when a route is created for the driving travel mode. if travelMode is not Driving, avoid is not required",
            "schema": {
              "type": "string",
              "enum": [
                "highways",
                "tolls",
                "ferry",
                "minimizeHighways",
                "minimizeTolls",
                "borderCrossing"
              ]
            }
          },
          {
            "name": "distanceBeforeFirstTurn",
            "in": "query",
            "description": " Specifies the distance before the first turn is allowed in the route. if travelMode is Driving, distanceBeforeFirstTurn is required",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "heading",
            "in": "query",
            "description": " Desired camera heading in degrees, clockwise from north.",
            "schema": {
              "maximum": 359,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "optimize",
            "in": "query",
            "description": "Specifies what parameters to use to optimize the route on the map.",
            "schema": {
              "type": "string",
              "enum": [
                "distance",
                "time",
                "timeWithTraffic",
                "timeAvoidClosure"
              ]
            }
          },
          {
            "name": "optimizeWaypoints",
            "in": "query",
            "description": "Instructs the API to rearrange the route waypoints and reduce the route cost specified with the optimize parameter. ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "routeAttributes",
            "in": "query",
            "description": "Specify to include or exclude parts of the routes response.",
            "schema": {
              "type": "string",
              "enum": [
                "excludeItinerary",
                "routePath",
                "transitStops",
                "routeSummariesOnly",
                "regionTravelSummary",
                "all"
              ]
            }
          },
          {
            "name": "routePathOutput",
            "in": "query",
            "description": "Specifies whether the response should include information about Point (latitude and longitude) values for the routeâ€™s path.",
            "schema": {
              "type": "string",
              "enum": [
                "Points",
                "None"
              ]
            }
          },
          {
            "name": "tolerances",
            "in": "query",
            "description": " Specifies a series of tolerance values. Each value produces a subset of points that approximates the route that is described by the full set of points. if routePathOutput is Points, tolerances is required.",
            "schema": {}
          },
          {
            "name": "distanceUnit",
            "in": "query",
            "description": " The units to use for distance in the response.",
            "schema": {
              "type": "string",
              "default": "km",
              "enum": [
                "Kilometer",
                "km",
                "Mile",
                "mi"
              ]
            }
          },
          {
            "name": "dateTime",
            "in": "query",
            "description": "The timeType parameter identifies the desired transit time, such as arrival time or departure time. if travelMode is Transit, dateTime is required",
            "schema": {
              "type": "string",
              "format": "datetime"
            }
          },
          {
            "name": "timeType",
            "in": "query",
            "description": "Specifies how to interpret the date and transit time value that is specified by the dateTime parameter. if travelMode is Transit, timeType is required",
            "schema": {
              "type": "string",
              "enum": [
                "Arrival",
                "Departure",
                "LastAvailable"
              ]
            }
          },
          {
            "name": "maxSolutions",
            "in": "query",
            "description": "Specifies the maximum number of transit routes to return. if travelMode is Transit or Driving, maxSolutions is required",
            "schema": {
              "maximum": 3,
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "travelMode",
            "in": "path",
            "description": "The mode of travel for the route.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Driving",
                "Walking",
                "Transit"
              ]
            }
          },
          {
            "name": "itineraryGroups",
            "in": "query",
            "description": " Specifies whether the response include information about itinerary groups (continuous itinerary items in same mode are usually grouped together).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      }
    },
    "/Routes/Truck": {
      "get": {
        "description": "Synchronous Truck Routing Request URL ",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          },
          {
            "name": "waypoint.1",
            "in": "query",
            "description": "Specifies two or more locations that define the route and that are in sequential order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "waypoint.3",
            "in": "query",
            "description": "Specifies two or more locations that define the route and that are in sequential order.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viaWaypoint.2",
            "in": "query",
            "description": "Specifies one or more locations that define intermediate points of a route between waypoints.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "avoid",
            "in": "query",
            "description": "Specifies the road types to minimize or avoid when a route is created for the driving travel mode. if travelMode is not Driving, avoid is not required",
            "schema": {
              "type": "string",
              "enum": [
                "highways",
                "tolls",
                "ferry",
                "minimizeHighways",
                "minimizeTolls",
                "borderCrossing",
                "minimizeDrivingSideTurn",
                "minimizeAgainstDrivingSideTurn",
                "minimizeUTurn"
              ]
            }
          },
          {
            "name": "distanceBeforeFirstTurn",
            "in": "query",
            "description": " Specifies the distance before the first turn is allowed in the route. if travelMode is Driving, distanceBeforeFirstTurn is required",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "heading",
            "in": "query",
            "description": " Desired camera heading in degrees, clockwise from north.",
            "schema": {
              "maximum": 359,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "optimize",
            "in": "query",
            "description": "Specifies what parameters to use to optimize the route on the map.",
            "schema": {
              "type": "string",
              "enum": [
                "time",
                "timeWithTraffic"
              ]
            }
          },
          {
            "name": "optimizeWaypoints",
            "in": "query",
            "description": "Instructs the API to rearrange the route waypoints and reduce the route cost specified with the optimize parameter. ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "routeAttributes",
            "in": "query",
            "description": "Specify to include or exclude parts of the routes response.",
            "schema": {
              "type": "string",
              "enum": [
                "routePath",
                "regionTravelSummary"
              ]
            }
          },
          {
            "name": "tolerances",
            "in": "query",
            "description": " Specifies a series of tolerance values. Each value produces a subset of points that approximates the route that is described by the full set of points. if routePathOutput is Points, tolerances is required.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "distanceUnit",
            "in": "query",
            "description": " The units to use for distance in the response.",
            "schema": {
              "type": "string",
              "default": "km",
              "enum": [
                "kilometer",
                "km",
                "mile",
                "mi"
              ]
            }
          },
          {
            "name": "dateTime",
            "in": "query",
            "description": "The timeType parameter identifies the desired transit time, such as arrival time or departure time. if travelMode is Transit, dateTime is required",
            "schema": {
              "type": "string",
              "format": "datetime"
            }
          },
          {
            "name": "dimensionUnit",
            "in": "query",
            "description": "The unit of measurement of width, height, length. Can be one of the following values",
            "schema": {
              "type": "string",
              "enum": [
                "meter",
                "m",
                "foot",
                "ft"
              ]
            }
          },
          {
            "name": "weightUnit",
            "in": "query",
            "description": "The unit of measurement of weight",
            "schema": {
              "type": "string",
              "enum": [
                "kilogram ",
                "kg",
                "pound ",
                "lb"
              ]
            }
          },
          {
            "name": "vehicleHeight",
            "in": "query",
            "description": " The height of the vehicle in the specified dimension units",
            "schema": {}
          },
          {
            "name": "vehicleWidth",
            "in": "query",
            "description": "The width of the vehicle in the specified dimension units.",
            "schema": {}
          },
          {
            "name": "vehicleLength",
            "in": "query",
            "description": "The length of the vehicle in the specified dimension units.",
            "schema": {}
          },
          {
            "name": "vehicleWeight",
            "in": "query",
            "description": " The weight of the vehicle in the specified weight units.",
            "schema": {}
          },
          {
            "name": "vehicleAxles",
            "in": "query",
            "description": "The number of axles.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "vehicleTrailers",
            "in": "query",
            "description": "The number of trailers.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "vehicleSemi",
            "in": "query",
            "description": " Indicates if the truck is pulling a semi-trailer. Semi-trailer restrictions are mostly used in North America.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vehicleMaxGradient",
            "in": "query",
            "description": "The maximum gradient the vehicle can drive measured in degrees.",
            "schema": {}
          },
          {
            "name": "vehicleMinTurnRadius",
            "in": "query",
            "description": " The minimum required radius for the vehicle to turn in the specified dimension units.",
            "schema": {}
          },
          {
            "name": "vehicleAvoidCrossWind",
            "in": "query",
            "description": "Indicates if the vehicle shall avoid crosswinds.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vehicleAvoidGroundingRisk",
            "in": "query",
            "description": "Indicates if the route shall avoid the risk of grounding.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vehicleHazardousMaterials",
            "in": "query",
            "description": "A comma separated and case-sensitive list of one or more hazardous materials for which the vehicle is transporting. ",
            "schema": {
              "type": "string",
              "enum": [
                "Combustable",
                "C",
                "Corrosive",
                "Cr",
                "Explosive",
                "E",
                "Flammable",
                "F",
                "FlammableSolid",
                "FS",
                "Gas",
                "G",
                "GoodsHarmfulToWater",
                "WH",
                "Organic",
                "O",
                "Other",
                "Poison",
                "P",
                "PoisonousInhalation",
                "PI",
                "Radioactive",
                "R",
                "None"
              ]
            }
          },
          {
            "name": "vehicleHazardousPermits",
            "in": "query",
            "description": "A comma separated and case-sensitive list of one or more hazardous materials for which the vehicle has a permit.",
            "schema": {
              "type": "string",
              "enum": [
                "AllAppropriateForLoad",
                "Combustable",
                "C",
                "Corrosive",
                "Cr",
                "Explosive",
                "E",
                "Flammable",
                "F",
                "FlammableSolid",
                "FS",
                "Gas",
                "G",
                "Organic",
                "O",
                "Poison",
                "P",
                "PoisonousInhalation",
                "PI",
                "Radioactive",
                "R",
                "None"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      }
    },
    "/Routes/FromMajorRoads": {
      "get": {
        "description": "Find routes from major roads in four directions (West, North, East, South).",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          },
          {
            "name": "destination",
            "in": "query",
            "description": "Specifies the final location for all the routes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Specifies to return only starting points for each major route in the response.",
            "schema": {
              "type": "string",
              "enum": [
                "routes"
              ]
            }
          },
          {
            "name": "routeAttributes",
            "in": "query",
            "description": "Specify to include or exclude parts of the routes response.",
            "schema": {
              "type": "string",
              "enum": [
                "routePath",
                "excludeItinerary"
              ]
            }
          },
          {
            "name": "routePathOutput",
            "in": "query",
            "description": "Specifies whether the response should include information about Point (latitude and longitude) values for each routeâ€™s path.",
            "schema": {
              "type": "string",
              "enum": [
                "Points",
                "None"
              ]
            }
          },
          {
            "name": "distanceUnit",
            "in": "query",
            "description": " The units to use for distance in the response.",
            "schema": {
              "type": "string",
              "default": "km",
              "enum": [
                "Kilometer",
                "km",
                "Mile",
                "mi"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      }
    },
    "/Routes/OptimizeItinerary": {
      "post": {
        "description": "Synchronous POST Optimize Itinerary",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Specifies the final location for all the routes.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/OptimizeItinerary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Routes/OptimizeItineraryAsync": {
      "post": {
        "description": "Synchronous POST Optimize Itinerary",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Specifies the final location for all the routes.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/OptimizeItinerary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Routes/DistanceMatrix": {
      "post": {
        "description": "Synchronous Distance Matrix Request URL (POST)",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Specifies the final location for all the routes.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/DistanceMatrix"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Routes/DistanceMatrixAsync": {
      "post": {
        "description": "ASynchronous Distance Matrix Request URL (POST)",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Specifies the final location for all the routes.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/DistanceMatrix"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Routes/Isochrones": {
      "get": {
        "description": "Calculate an Isochrone",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "The point around which the isochrone will be calculated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxTime",
            "in": "query",
            "description": "The maximum travel time in the specified time units in which the isochrone polygon is generated. Either maxDistance and maxTime is required, not both.",
            "schema": {
              "maximum": 60,
              "type": "integer"
            }
          },
          {
            "name": "timeUnit",
            "in": "query",
            "description": " The units in which the maxTime value is specified.",
            "schema": {
              "type": "string",
              "enum": [
                "minute",
                "second "
              ]
            }
          },
          {
            "name": "maxDistance",
            "in": "query",
            "description": " The maximum travel distance in the specified distance units in which the isochrone polygon is generated. if travelMode is driving or walking, maxDistance is required",
            "schema": {
              "maximum": 60,
              "type": "integer"
            }
          },
          {
            "name": "distanceUnit",
            "in": "query",
            "description": "The units in which the maxDistance value is specified.",
            "schema": {
              "type": "string",
              "enum": [
                "mile",
                "mi",
                "kilometer",
                "km"
              ]
            }
          },
          {
            "name": "dateTime",
            "in": "query",
            "description": "if travelMode is not driving or transit, dateTime is not required",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optimize",
            "in": "query",
            "description": " Specifies what parameters to use to optimize the isochrone route",
            "schema": {
              "type": "string",
              "enum": [
                "distance",
                "time",
                "timeWithTraffic"
              ]
            }
          },
          {
            "name": "travelMode",
            "in": "query",
            "description": " Indicates the which routing profile to snap the points to.",
            "schema": {
              "type": "string",
              "enum": [
                "driving",
                "walking",
                "transit",
                "truck"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {}
          }
        }
      }
    },
    "/Routes/IsochronesAsyncCallback": {
      "get": {
        "description": "Calculate an Isochrone",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          },
          {
            "name": "requestId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "The point around which the isochrone will be calculated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxTime",
            "in": "query",
            "description": "The maximum travel time in the specified time units in which the isochrone polygon is generated. Either maxDistance and maxTime is required, not both.",
            "schema": {
              "maximum": 60,
              "type": "integer"
            }
          },
          {
            "name": "timeUnit",
            "in": "query",
            "description": " The units in which the maxTime value is specified.",
            "schema": {
              "type": "string",
              "enum": [
                "minute",
                "second "
              ]
            }
          },
          {
            "name": "maxDistance",
            "in": "query",
            "description": " The maximum travel distance in the specified distance units in which the isochrone polygon is generated. if travelMode is driving or walking, maxDistance is required",
            "schema": {
              "maximum": 60,
              "type": "integer"
            }
          },
          {
            "name": "distanceUnit",
            "in": "query",
            "description": "The units in which the maxDistance value is specified.",
            "schema": {
              "type": "string",
              "enum": [
                "mile",
                "mi",
                "kilometer",
                "km"
              ]
            }
          },
          {
            "name": "dateTime",
            "in": "query",
            "description": "if travelMode is not driving or transit, dateTime is not required",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optimize",
            "in": "query",
            "description": " Specifies what parameters to use to optimize the isochrone route",
            "schema": {
              "type": "string",
              "enum": [
                "distance",
                "time",
                "timeWithTraffic"
              ]
            }
          },
          {
            "name": "travelMode",
            "in": "query",
            "description": " Indicates the which routing profile to snap the points to.",
            "schema": {
              "type": "string",
              "enum": [
                "driving",
                "walking",
                "transit",
                "truck"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {}
          }
        }
      }
    },
    "/Routes/SnapToRoadAsync": {
      "post": {
        "description": "Snap Points to Roads",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Specifies the final location for all the routes.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SnapToRoad"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Routes/SnapToRoadAsyncCallback": {
      "post": {
        "description": "Snap Points to Roads",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Specifies the final location for all the routes.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SnapToRoad"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Routes/LocalInsights": {
      "get": {
        "description": "Get Local Insights",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "The point around which the isochrone will be calculated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxTime",
            "in": "query",
            "description": "The maximum travel time in the specified time units in which the isochrone polygon is generated. if optimize is Time or TimeWithTraffic, maxTime is required. Either maxDistance and maxTime is required, not both.",
            "schema": {
              "maximum": 60,
              "type": "integer"
            }
          },
          {
            "name": "timeUnit",
            "in": "query",
            "description": " The units in which the maxTime value is specified.",
            "schema": {
              "type": "string",
              "enum": [
                "minute",
                "second "
              ]
            }
          },
          {
            "name": "maxDistance",
            "in": "query",
            "description": " The maximum travel distance in the specified distance units in which the isochrone polygon is generated. if travelMode is driving or walking, maxDistance is required",
            "schema": {
              "maximum": 50,
              "type": "integer"
            }
          },
          {
            "name": "distanceUnit",
            "in": "query",
            "description": "The units in which the maxDistance value is specified.",
            "schema": {
              "type": "string",
              "enum": [
                "mile",
                "mi",
                "kilometer",
                "km"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "A comma separated list of type IDs.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "EatDrink",
                "SeeDo",
                "Shop",
                "BanksAndCreditUnions",
                "Hospitals",
                "HotelsAndMotels",
                "Parking"
              ]
            }
          },
          {
            "name": "dateTime",
            "in": "query",
            "description": "The timeType parameter identifies the desired transit time, such as arrival time or departure time. if travelMode is driving, dateTime is required",
            "schema": {
              "type": "string",
              "format": "datetime"
            }
          },
          {
            "name": "optimize",
            "in": "query",
            "description": "Specifies what parameters to use to optimize the route on the map.",
            "schema": {
              "type": "string",
              "enum": [
                "distance",
                "time"
              ]
            }
          },
          {
            "name": "travelMode",
            "in": "query",
            "description": "The mode of travel for the route.",
            "schema": {
              "type": "string",
              "enum": [
                "driving",
                "walking",
                "transit"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {}
          }
        }
      }
    },
    "/Routes/LocalInsightsAsync": {
      "get": {
        "description": "Get Local Insights",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "BingMapsAPIKey",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApfIK78P79XCZ65ziR38mC5_OTPZftMVdHBqtiom5sUp4RvooXpdVBxsJWmH_XjF"
              ]
            }
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "The point around which the isochrone will be calculated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxTime",
            "in": "query",
            "description": "The maximum travel time in the specified time units in which the isochrone polygon is generated. if optimize is Time or TimeWithTraffic, maxTime is required. Either maxDistance and maxTime is required, not both.",
            "schema": {
              "maximum": 60,
              "type": "integer"
            }
          },
          {
            "name": "timeUnit",
            "in": "query",
            "description": " The units in which the maxTime value is specified.",
            "schema": {
              "type": "string",
              "enum": [
                "minute",
                "second "
              ]
            }
          },
          {
            "name": "maxDistance",
            "in": "query",
            "description": " The maximum travel distance in the specified distance units in which the isochrone polygon is generated. if travelMode is driving or walking, maxDistance is required",
            "schema": {
              "maximum": 50,
              "type": "integer"
            }
          },
          {
            "name": "distanceUnit",
            "in": "query",
            "description": "The units in which the maxDistance value is specified.",
            "schema": {
              "type": "string",
              "enum": [
                "mile",
                "mi",
                "kilometer",
                "km"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "A comma separated list of type IDs.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "EatDrink",
                "SeeDo",
                "Shop",
                "BanksAndCreditUnions",
                "Hospitals",
                "HotelsAndMotels",
                "Parking"
              ]
            }
          },
          {
            "name": "dateTime",
            "in": "query",
            "description": "The timeType parameter identifies the desired transit time, such as arrival time or departure time. if travelMode is driving, dateTime is required",
            "schema": {
              "type": "string",
              "format": "datetime"
            }
          },
          {
            "name": "optimize",
            "in": "query",
            "description": "Specifies what parameters to use to optimize the route on the map.",
            "schema": {
              "type": "string",
              "enum": [
                "distance",
                "time"
              ]
            }
          },
          {
            "name": "travelMode",
            "in": "query",
            "description": "The mode of travel for the route.",
            "schema": {
              "type": "string",
              "enum": [
                "driving",
                "walking",
                "transit"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One or more Location resources are returned in the response when you make a request by using these URL templates",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SnapToRoad": {
        "required": [
          "points"
        ],
        "type": "object",
        "properties": {
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "interpolate": {
            "type": "boolean"
          },
          "includeSpeedLimit": {
            "type": "boolean"
          },
          "includeTruckSpeedLimit": {
            "type": "boolean"
          },
          "speedUnit": {
            "type": "string",
            "enum": [
              "MPH",
              "KPH"
            ]
          },
          "travelMode": {
            "type": "string",
            "enum": [
              "driving",
              "walking"
            ]
          },
          "vehicleSpec": {
            "$ref": "#/components/schemas/VehicleSpec"
          }
        }
      },
      "VehicleSpec": {
        "type": "object",
        "properties": {
          "dimensionUnit": {
            "type": "string",
            "enum": [
              "meter",
              "m",
              "foot",
              "ft"
            ]
          },
          "weightUnit": {
            "type": "string",
            "enum": [
              "kilogram ",
              "kg",
              "pound ",
              "lb"
            ]
          },
          "vehicleAxles": {
            "type": "integer",
            "example": 3
          },
          "vehicleTrailers": {
            "type": "integer",
            "example": 2
          },
          "vehicleSemi": {
            "type": "boolean"
          },
          "vehicleAvoidCrossWind": {
            "type": "boolean"
          },
          "vehicleAvoidGroundingRisk": {
            "type": "boolean"
          },
          "vehicleHazardousMaterials": {
            "type": "string",
            "enum": [
              "Combustable",
              "C",
              "Corrosive",
              "Cr",
              "Explosive",
              "E",
              "Flammable",
              "F",
              "FlammableSolid",
              "FS",
              "Gas",
              "G",
              "GoodsHarmfulToWater",
              "WH",
              "Organic",
              "O",
              "Other",
              "Poison",
              "P",
              "PoisonousInhalation",
              "PI",
              "Radioactive",
              "R",
              "None"
            ]
          },
          "vehicleHazardousPermits": {
            "type": "string",
            "enum": [
              "AllAppropriateForLoad",
              "Combustable",
              "C",
              "Corrosive",
              "Cr",
              "Explosive",
              "E",
              "Flammable",
              "F",
              "FlammableSolid",
              "FS",
              "Gas",
              "G",
              "Organic",
              "O",
              "Poison",
              "P",
              "PoisonousInhalation",
              "PI",
              "Radioactive",
              "R",
              "None"
            ]
          }
        }
      },
      "DistanceMatrix": {
        "required": [
          "origins",
          "travelMode"
        ],
        "type": "object",
        "properties": {
          "origins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "destinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "travelMode": {
            "type": "string",
            "enum": [
              "driving",
              "walking",
              "transit"
            ]
          },
          "startTime": {
            "type": "string",
            "description": "if travelMode is driving, startTime is required",
            "format": "datetime"
          },
          "endTime": {
            "type": "string",
            "description": "if travelMode is driving, endTime is required",
            "format": "datetime"
          },
          "resolution": {
            "type": "integer",
            "description": "if travelMode is driving, resolution is required"
          },
          "distanceUnit": {
            "type": "string",
            "enum": [
              "mile",
              "mi",
              "kilometer",
              "km"
            ]
          },
          "timeUnit": {
            "type": "string",
            "enum": [
              "minute",
              "second"
            ]
          }
        }
      },
      "OptimizeItinerary": {
        "required": [
          "agents",
          "itineraryItems"
        ],
        "type": "object",
        "properties": {
          "agents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Agent"
            }
          },
          "itineraryItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItineraryItem"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "SimpleRequest",
              "TrafficRequest"
            ]
          },
          "roadnetwork": {
            "type": "boolean"
          },
          "costvalue": {
            "type": "string",
            "enum": [
              "TravelTime",
              "Distance",
              "Price"
            ]
          }
        }
      },
      "ItineraryItem": {
        "required": [
          "closingTime",
          "dwellTime",
          "location",
          "name",
          "openingTime",
          "priority"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "openingTime": {
            "type": "string",
            "format": "datetime"
          },
          "closingTime": {
            "type": "string",
            "format": "datetime"
          },
          "dwellTime": {
            "type": "string"
          },
          "priority": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer"
          },
          "quantity": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "depot": {
            "type": "boolean"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "dropOffFrom": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Agent": {
        "required": [
          "name",
          "shifts"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "shifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shift"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "capacity": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "Price": {
        "type": "object"
      },
      "Shift": {
        "required": [
          "endLocation",
          "endTime",
          "startLocation",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "format": "datetime"
          },
          "startLocation": {
            "$ref": "#/components/schemas/Location"
          },
          "endTime": {
            "type": "string",
            "format": "datetime"
          },
          "endLocation": {
            "$ref": "#/components/schemas/Location"
          },
          "breaks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Break"
            }
          }
        }
      },
      "Break": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "format": "datetime"
          },
          "endTime": {
            "type": "string",
            "format": "datetime"
          },
          "duration": {
            "type": "string"
          }
        }
      },
      "Location": {
        "type": "object"
      }
    }
  }
}